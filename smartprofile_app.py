# ü§ñ SmartProfile Marketing AI - Version Hybride avec ChatGPT Automatique
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import time
import requests
import json

# Configuration
st.set_page_config(
    page_title="SmartProfile Marketing AI",
    page_icon="ü§ñ",
    layout="wide"
)

# CSS Moderne
st.markdown("""
<style>
.main-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 2rem;
    border-radius: 15px;
    text-align: center;
    color: white;
    margin-bottom: 2rem;
    box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
}

.chat-user {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 20px 20px 5px 20px;
    margin: 1rem 0;
    margin-left: 20%;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

.chat-assistant {
    background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 20px 20px 20px 5px;
    margin: 1rem 0;
    margin-right: 20%;
    box-shadow: 0 4px 15px rgba(46, 204, 113, 0.3);
}

.chat-assistant-thinking {
    background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 20px 20px 20px 5px;
    margin: 1rem 0;
    margin-right: 20%;
    box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
}

.metric-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1.5rem;
    border-radius: 12px;
    text-align: center;
    box-shadow: 0 6px 20px rgba(0,0,0,0.1);
    transition: transform 0.2s ease;
}

.metric-card:hover {
    transform: translateY(-5px);
}

.status-badge {
    background: #2ecc71;
    color: white;
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: bold;
}

.api-status {
    background: #f39c12;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 25px;
    font-size: 0.9rem;
    margin: 0.5rem 0;
}

.thinking-indicator {
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% { opacity: 0.6; }
    50% { opacity: 1; }
    100% { opacity: 0.6; }
}
</style>
""", unsafe_allow_html=True)

class SmartProfileAgentHybrid:
    """Agent conversationnel SmartProfile avec ChatGPT automatique pour questions hors domaine"""
    
    def __init__(self):
        self.load_data()
        self.setup_chatgpt()
        
        # Mots-cl√©s du domaine SmartProfile marketing
        self.marketing_keywords = {
            'satisfaction', 'sentiment', 'avis', 'nps', 'feedback', 'client', 'customer',
            'campagne', 'campaign', 'email', 'sms', 'performance', 'roi', 'conversion',
            'churn', 'r√©tention', 'risque', 'partir', 'perdre', 'retention',
            'segment', 'profil', 'groupe', 'cat√©gorie', 'clustering', 'segmentation',
            'recommandation', 'conseil', 'action', 'am√©liorer', 'optimiser', 'strategy',
            'marketing', 'digital', 'automation', 'analytics', 'data', 'crm',
            'smartprofile', 'plateforme', 'dashboard', 'kpi', 'm√©trique', 'revenus'
        }
    
    def load_data(self):
        """Charge des donn√©es SmartProfile"""
        np.random.seed(42)
        n_customers = 1000
        
        self.customers = pd.DataFrame({
            'customer_id': [f"SP_{i:05d}" for i in range(n_customers)],
            'sector': np.random.choice(['Banque', 'Assurance', 'Tourisme', 'Presse', 'Retail'], n_customers),
            'satisfaction': np.random.normal(3.7, 0.9, n_customers),
            'churn_risk': np.random.beta(2, 8, n_customers),
            'lifetime_value': np.random.exponential(3000, n_customers),
            'interactions': np.random.poisson(12, n_customers),
            'email_opens': np.random.poisson(6, n_customers),
            'clicks': np.random.poisson(2, n_customers),
            'channel': np.random.choice(['Email', 'SMS', 'Web', 'Mobile'], n_customers)
        })
        
        self.customers['satisfaction'] = self.customers['satisfaction'].clip(1, 5)
        self.customers['churn_risk'] = self.customers['churn_risk'].clip(0, 1)
        
        n_campaigns = 100
        self.campaigns = pd.DataFrame({
            'campaign_id': [f"CAMP_{i:04d}" for i in range(n_campaigns)],
            'channel': np.random.choice(['Email', 'SMS', 'Web', 'Mobile', 'Social'], n_campaigns),
            'roi': np.random.uniform(50, 200, n_campaigns),
            'revenue': np.random.uniform(5000, 150000, n_campaigns),
            'cost': np.random.uniform(1000, 25000, n_campaigns),
            'status': np.random.choice(['Active', 'Completed', 'Paused'], n_campaigns, p=[0.3, 0.6, 0.1])
        })
        
        n_interactions = 2000
        self.interactions = pd.DataFrame({
            'interaction_id': [f"INT_{i:06d}" for i in range(n_interactions)],
            'sentiment': np.random.choice(['positif', 'neutre', 'n√©gatif'], n_interactions, p=[0.6, 0.25, 0.15]),
            'channel': np.random.choice(['Email', 'SMS', 'Web', 'Mobile'], n_interactions),
            'rating': np.random.randint(1, 6, n_interactions)
        })
    
    def setup_chatgpt(self):
        """Configure l'acc√®s ChatGPT"""
        self.chatgpt_available = False
        
        # V√©rifier si cl√© API disponible
        if 'openai_key' in st.session_state and st.session_state.openai_key:
            try:
                import openai
                openai.api_key = st.session_state.openai_key
                self.chatgpt_available = True
            except ImportError:
                st.sidebar.warning("üì¶ Module OpenAI non install√©. pip install openai")
    
    def is_marketing_question(self, question):
        """D√©termine si la question concerne le marketing SmartProfile"""
        question_lower = question.lower()
        
        # V√©rifier la pr√©sence de mots-cl√©s marketing
        marketing_score = sum(1 for keyword in self.marketing_keywords if keyword in question_lower)
        
        # Si au moins 1 mot-cl√© marketing trouv√©, c'est du domaine
        return marketing_score > 0
    
    def ask_chatgpt_external(self, question):
        """Demande √† ChatGPT pour les questions hors domaine"""
        if not self.chatgpt_available:
            return self.fallback_response(question)
        
        try:
            import openai
            
            # Prompt pour que ChatGPT r√©ponde comme l'agent SmartProfile
            system_prompt = f"""Tu es l'assistant IA SmartProfile, un expert en marketing digital et analyse de donn√©es. 

La question suivante n'est pas directement li√©e au marketing, mais tu dois y r√©pondre en tant qu'assistant SmartProfile intelligent.

R√®gles:
- R√©ponds naturellement √† la question
- Reste professionnel et utile
- Si possible, fais un lien subtil avec le marketing/business
- Utilise des emojis pour la lisibilit√©
- Signe comme "SmartProfile AI"

Question: {question}"""
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": question}
                ],
                max_tokens=800,
                temperature=0.7
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return self.fallback_response(question)
    
    def fallback_response(self, question):
        """R√©ponse de secours si ChatGPT non disponible"""
        return f"""ü§ñ **SmartProfile AI - Assistant Intelligent**

Je comprends votre question : "{question}"

Bien que cette question ne soit pas directement li√©e √† l'analyse marketing, je suis con√ßu principalement pour vous aider avec :

üìä **Mes sp√©cialit√©s marketing** :
‚Ä¢ Analyse de satisfaction et performance client
‚Ä¢ Optimisation des campagnes marketing multi-canal
‚Ä¢ Pr√©diction et pr√©vention du churn
‚Ä¢ Segmentation comportementale avanc√©e
‚Ä¢ Recommandations ROI et allocation budget

üí° **Pour cette question sp√©cifique**, je recommande de consulter des sources sp√©cialis√©es ou d'utiliser la vraie API ChatGPT.

üîë **Configurez l'API OpenAI** dans la sidebar pour que je puisse r√©pondre √† toutes vos questions avec l'intelligence ChatGPT !

üéØ **Puis-je vous aider avec une analyse marketing SmartProfile ?**"""
    
    def ask_smartprofile_agent(self, question):
        """Traite les questions de domaine marketing SmartProfile"""
        return self.generate_smart_response(question)
    
    def main_response_handler(self, question):
        """Gestionnaire principal qui d√©termine comment r√©pondre"""
        
        # V√©rifier si c'est une question marketing
        if self.is_marketing_question(question):
            # Question de domaine SmartProfile - r√©pond avec notre expertise
            response_type = "üéØ **Expertise SmartProfile**"
            return self.ask_smartprofile_agent(question), response_type
        else:
            # Question hors domaine - demander √† ChatGPT
            response_type = "üß† **Intelligence ChatGPT via SmartProfile AI**"
            return self.ask_chatgpt_external(question), response_type
    
    def generate_smart_response(self, question):
        """G√©n√®re une r√©ponse marketing SmartProfile"""
        q = question.lower()
        
        if any(word in q for word in ['satisfaction', 'sentiment', 'avis', 'nps']):
            return self.analyze_satisfaction()
        elif any(word in q for word in ['campagne', 'email', 'sms', 'performance', 'roi']):
            return self.analyze_campaigns()
        elif any(word in q for word in ['churn', 'r√©tention', 'risque', 'partir']):
            return self.analyze_churn()
        elif any(word in q for word in ['recommandation', 'conseil', 'action', 'am√©liorer']):
            return self.generate_recommendations()
        elif any(word in q for word in ['segment', 'profil', 'groupe', 'cat√©gorie']):
            return self.analyze_segmentation()
        else:
            return self.marketing_help_response()
    
    def analyze_satisfaction(self):
        """Analyse de satisfaction SmartProfile"""
        avg_satisfaction = self.customers['satisfaction'].mean()
        nps = self.calculate_nps()
        high_satisfaction = (self.customers['satisfaction'] >= 4.5).sum()
        
        response = f"""üìä **Analyse Satisfaction Client SmartProfile**

üòä **Score moyen**: {avg_satisfaction:.1f}/5 
üìà **Net Promoter Score**: {nps:+.1f} {"üü¢" if nps > 50 else "üü°" if nps > 0 else "üî¥"}
‚≠ê **Clients tr√®s satisfaits**: {high_satisfaction} ({high_satisfaction/len(self.customers)*100:.1f}%)

üîç **D√©tail par secteur**:
{self.get_satisfaction_by_sector()}

üéØ **Recommandations SmartProfile**:
‚Ä¢ Programme de fid√©lisation pour {high_satisfaction} clients promoteurs
‚Ä¢ Plan d'am√©lioration cibl√© par secteur sous-performant
‚Ä¢ Personnalisation des parcours selon niveau de satisfaction
‚Ä¢ Int√©gration alerts NPS dans votre Customer Data Platform

üí∞ **Impact business estim√©**: +15% r√©tention, +‚Ç¨{avg_satisfaction*50000:.0f} revenus annuels

üöÄ **Prochaines √©tapes**: Mise en place scoring satisfaction temps r√©el"""

        # Graphique
        fig = px.histogram(self.customers, x='satisfaction', nbins=10,
                          title="Distribution Satisfaction Client SmartProfile")
        st.plotly_chart(fig, use_container_width=True)
        
        return response
    
    def analyze_campaigns(self):
        """Analyse des campagnes marketing"""
        avg_roi = self.campaigns['roi'].mean()
        best_channel = self.campaigns.groupby('channel')['roi'].mean().idxmax()
        total_revenue = self.campaigns['revenue'].sum()
        
        response = f"""üìß **Performance Campagnes SmartProfile**

üìà **ROI moyen**: {avg_roi:.1f}%
üèÜ **Canal star**: {best_channel} 
üí∞ **Revenus g√©n√©r√©s**: ‚Ç¨{total_revenue:,.0f}
üìä **Campagnes actives**: {len(self.campaigns[self.campaigns['status']=='Active'])}

üéØ **Top 3 canaux par ROI**:
{self.get_top_channels()}

üöÄ **Optimisations recommand√©es**:
‚Ä¢ R√©allocation budget vers {best_channel} (+{self.campaigns[self.campaigns['channel']==best_channel]['roi'].mean()-avg_roi:.1f}% ROI vs moyenne)
‚Ä¢ A/B testing automatis√© sur cr√©atifs sous-performants
‚Ä¢ Orchestration cross-canal intelligente avec SmartProfile
‚Ä¢ Personalisation par segment comportemental

üí° **Potentiel d'am√©lioration**: +25% ROI avec optimisation IA SmartProfile

üîÆ **Vision 2024**: Campagnes auto-optimis√©es par IA pr√©dictive"""

        # Graphique
        channel_perf = self.campaigns.groupby('channel')['roi'].mean()
        fig = px.bar(x=channel_perf.index, y=channel_perf.values,
                    title="ROI par Canal Marketing - SmartProfile Analytics")
        st.plotly_chart(fig, use_container_width=True)
        
        return response
    
    def analyze_churn(self):
        """Analyse du risque de churn"""
        high_risk = (self.customers['churn_risk'] > 0.7).sum()
        medium_risk = ((self.customers['churn_risk'] > 0.4) & (self.customers['churn_risk'] <= 0.7)).sum()
        avg_clv = self.customers['lifetime_value'].mean()
        
        response = f"""üîÆ **Analyse Pr√©dictive Churn - SmartProfile**

‚ö†Ô∏è **Clients √† risque √©lev√©**: {high_risk} ({high_risk/len(self.customers)*100:.1f}%)
üü° **Risque mod√©r√©**: {medium_risk} ({medium_risk/len(self.customers)*100:.1f}%)
üíé **Customer Lifetime Value moyen**: ‚Ç¨{avg_clv:.0f}
üí∏ **Valeur √† risque imm√©diat**: ‚Ç¨{high_risk * avg_clv * 0.6:.0f}

üîç **Profiling clients √† risque**:
‚Ä¢ Secteur le plus vuln√©rable: {self.get_churn_by_sector()}
‚Ä¢ Seuil engagement critique: <{self.customers['interactions'].quantile(0.25):.0f} interactions/mois
‚Ä¢ Score satisfaction limite: <{self.customers['satisfaction'].quantile(0.3):.1f}/5

üéØ **Strat√©gie de r√©tention SmartProfile**:
‚Ä¢ Campagne win-back automatis√©e pour {high_risk} clients imm√©diats
‚Ä¢ Programme de fid√©lisation pr√©dictif bas√© sur scoring
‚Ä¢ Alerts temps r√©el dans votre Customer Data Platform
‚Ä¢ S√©quences de nurturing personnalis√©es par niveau de risque

üí∞ **ROI programme r√©tention**: ‚Ç¨{avg_clv*0.7:.0f} par client sauv√©

üöÄ **Activation**: Mod√®le pr√©dictif int√©grable en 48h dans SmartProfile"""

        # Graphique
        fig = px.histogram(self.customers, x='churn_risk', nbins=20,
                          title="Distribution Risque de Churn - SmartProfile Predictive Analytics")
        st.plotly_chart(fig, use_container_width=True)
        
        return response
    
    def generate_recommendations(self):
        """Recommandations strat√©giques SmartProfile"""
        best_channel = self.campaigns.groupby('channel')['roi'].mean().idxmax()
        worst_sector = self.customers.groupby('sector')['satisfaction'].mean().idxmin()
        
        response = f"""üéØ **Recommandations Strat√©giques SmartProfile 2024**

üìà **Quick Wins - Impl√©mentation imm√©diate**:
‚Ä¢ Migration budget vers canal {best_channel} (ROI sup√©rieur de +{self.campaigns[self.campaigns['channel']==best_channel]['roi'].mean()-self.campaigns['roi'].mean():.1f}%)
‚Ä¢ Plan d'urgence secteur {worst_sector} (satisfaction critique d√©tect√©e)
‚Ä¢ Activation scoring comportemental temps r√©el sur Customer Data Platform

üöÄ **Initiatives strat√©giques Q2-Q3**:
‚Ä¢ D√©ploiement IA pr√©dictive multi-touch attribution
‚Ä¢ Orchestration parcours client omnicanal automatis√©e
‚Ä¢ Expansion segments high-value avec mod√®les look-alike
‚Ä¢ Int√©gration agents conversationnels comme cette d√©mo

üîÆ **Vision SmartProfile 2024-2025**:
‚Ä¢ Agents marketing autonomes avec prise de d√©cision IA
‚Ä¢ Pr√©diction Customer Lifetime Value en temps r√©el
‚Ä¢ Personnalisation 1:1 √† l'√©chelle avec deep learning
‚Ä¢ √âcosyst√®me marketing automation auto-apprenant

üí∞ **Business Case consolid√©**:
‚Ä¢ Revenus additionnels: +‚Ç¨{self.campaigns['revenue'].sum()*0.3:.0f} (+30% vs baseline)
‚Ä¢ Optimisation co√ªts: +25% efficacit√© op√©rationnelle
‚Ä¢ R√©tention: +40% r√©duction churn pr√©visible

üéØ **ROI programme global**: 380% sur 18 mois

üìÖ **Timeline activation**: Phase 1 lanceable sous 30 jours avec SmartProfile"""
        
        return response
    
    def analyze_segmentation(self):
        """Analyse de segmentation avanc√©e"""
        response = f"""üéØ **Segmentation Comportementale SmartProfile**

üìä **Analyse automatique des {len(self.customers)} profils clients**:

üèÜ **Segment Champions** ({(self.customers['satisfaction'] >= 4.5).sum()} clients):
‚Ä¢ Satisfaction √©lev√©e + engagement fort
‚Ä¢ CLV moyen: ‚Ç¨{self.customers[self.customers['satisfaction'] >= 4.5]['lifetime_value'].mean():.0f}
‚Ä¢ Strat√©gie: Programmes VIP et advocacy

üíé **Segment High-Value** ({((self.customers['lifetime_value'] > self.customers['lifetime_value'].quantile(0.8)) & (self.customers['churn_risk'] < 0.3)).sum()} clients):
‚Ä¢ Forte valeur + faible risque
‚Ä¢ Opportunit√©s cross-sell/up-sell maximales
‚Ä¢ Strat√©gie: Personnalisation premium

‚ö†Ô∏è **Segment At-Risk** ({((self.customers['churn_risk'] > 0.6) & (self.customers['satisfaction'] < 3.5)).sum()} clients):
‚Ä¢ Risque √©lev√© + satisfaction d√©grad√©e
‚Ä¢ Valeur menac√©e: ‚Ç¨{((self.customers['churn_risk'] > 0.6) & (self.customers['satisfaction'] < 3.5)).sum() * self.customers['lifetime_value'].mean() * 0.7:.0f}
‚Ä¢ Strat√©gie: Win-back urgent

üîÑ **Segment Nurturing** (reste de la base):
‚Ä¢ Potentiel de mont√©e en gamme
‚Ä¢ Strat√©gie: S√©quences d'engagement progressif

üöÄ **Activation SmartProfile**:
‚Ä¢ Segments mis √† jour en temps r√©el
‚Ä¢ Campagnes automatis√©es par segment
‚Ä¢ Scoring dynamique int√©gr√© CDP
‚Ä¢ Dashboard executif avec alertes

üìà **Impact attendu**: +45% relevance campagnes, +30% conversion"""

        # Graphique segmentation
        fig = px.scatter(self.customers, x='satisfaction', y='lifetime_value', 
                        color='churn_risk', size='interactions',
                        title="Segmentation Client SmartProfile - Vue 360¬∞")
        st.plotly_chart(fig, use_container_width=True)
        
        return response
    
    def marketing_help_response(self):
        """Aide sp√©cialis√©e marketing SmartProfile"""
        return f"""ü§ñ **SmartProfile Marketing Intelligence Center**

Je suis votre expert IA sp√©cialis√© en marketing digital et Customer Data Platform.

üéØ **Domaines d'expertise SmartProfile**:
‚Ä¢ **Analytics & Performance** : ROI campagnes, attribution multi-touch, KPIs avanc√©s
‚Ä¢ **Customer Intelligence** : Segmentation comportementale, scoring pr√©dictif, CLV
‚Ä¢ **Marketing Automation** : Orchestration omnicanale, personnalisation, nurturing
‚Ä¢ **Pr√©dictif & IA** : Churn prevention, recommandations, mod√®les pr√©dictifs

üí° **Questions marketing que je ma√Ætrise**:
‚Ä¢ "Analyse la performance de nos campagnes email vs SMS par secteur"
‚Ä¢ "Identifie les 100 clients √† plus fort potentiel de cross-sell"
‚Ä¢ "Optimise l'allocation de notre budget Q2 par canal et segment"
‚Ä¢ "Pr√©dis l'impact d'une campagne de r√©tention sur le secteur Banque"

üìä **Ma base de donn√©es actuelle**:
‚Ä¢ {len(self.customers):,} profils clients analys√©s
‚Ä¢ {len(self.campaigns)} campagnes avec m√©triques compl√®tes  
‚Ä¢ {len(self.interactions):,} interactions comportementales

üîë **Mode hybride activ√©** : Questions marketing = expertise SmartProfile | Questions g√©n√©rales = Intelligence ChatGPT

üéØ **Comment puis-je optimiser votre strat√©gie marketing aujourd'hui ?**"""
    
    # M√©thodes utilitaires
    def calculate_nps(self):
        promoters = (self.customers['satisfaction'] >= 4.5).sum()
        detractors = (self.customers['satisfaction'] <= 2.5).sum()
        return (promoters - detractors) / len(self.customers) * 100
    
    def get_satisfaction_by_sector(self):
        result = ""
        for sector, satisfaction in self.customers.groupby('sector')['satisfaction'].mean().sort_values(ascending=False).items():
            result += f"‚Ä¢ {sector}: {satisfaction:.1f}/5\n"
        return result
    
    def get_top_channels(self):
        result = ""
        for channel, roi in self.campaigns.groupby('channel')['roi'].mean().sort_values(ascending=False).head(3).items():
            result += f"‚Ä¢ {channel}: {roi:.1f}% ROI\n"
        return result
    
    def get_churn_by_sector(self):
        return self.customers.groupby('sector')['churn_risk'].mean().idxmax()

def main():
    """Interface principale"""
    
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>ü§ñ SmartProfile Marketing AI</h1>
        <p>Assistant Conversationnel Hybride - Expertise Marketing + Intelligence ChatGPT</p>
        <small>Customer Data Platform ‚Ä¢ Mod√®les Pr√©dictifs ‚Ä¢ IA G√©n√©raliste</small>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialisation de l'agent
    if 'agent' not in st.session_state:
        with st.spinner("üöÄ Initialisation SmartProfile AI Hybride..."):
            st.session_state.agent = SmartProfileAgentHybrid()
            st.session_state.messages = []
        st.success("‚úÖ Agent SmartProfile Hybride activ√© !")
    
    # Sidebar
    with st.sidebar:
        st.markdown('<div class="status-badge">SmartProfile AI Hybride</div>', unsafe_allow_html=True)
        
        # Status API
        if st.session_state.agent.chatgpt_available:
            st.markdown('<div class="api-status">üß† ChatGPT Connect√©</div>', unsafe_allow_html=True)
            st.success("üî• Mode Hybride Complet Activ√©")
        else:
            st.markdown('<div class="api-status">üéØ Mode Marketing + Simulation</div>', unsafe_allow_html=True)
            
            # Configuration API
            with st.expander("üîë Configuration ChatGPT"):
                st.info("Pour les questions hors marketing, activez ChatGPT")
                api_key = st.text_input("Cl√© API OpenAI:", type="password", 
                                       help="Questions marketing = expertise SmartProfile\nQuestions g√©n√©rales = ChatGPT")
                if api_key:
                    st.session_state.openai_key = api_key
                    st.session_state.agent.chatgpt_available = True
                    st.success("‚úÖ ChatGPT activ√© pour questions g√©n√©rales!")
                    st.rerun()
        
        # M√©triques live
        st.subheader("üìä Analytics SmartProfile")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("üë• Clients", f"{len(st.session_state.agent.customers):,}")
            st.metric("üìß Campagnes", len(st.session_state.agent.campaigns))
        with col2:
            avg_satisfaction = st.session_state.agent.customers['satisfaction'].mean()
            st.metric("üòä NPS", f"{st.session_state.agent.calculate_nps():+.0f}")
            avg_roi = st.session_state.agent.campaigns['roi'].mean()
            st.metric("üìà ROI", f"{avg_roi:.1f}%")
        
        # Questions pr√©d√©finies mixtes
        st.subheader("üí° Questions Exemples")
        
        st.write("üéØ **Questions Marketing** (expertise SmartProfile):")
        marketing_questions = [
            "Analyse la satisfaction client par secteur",
            "Performance des campagnes email vs SMS", 
            "Identifie les clients √† risque de churn",
            "Recommande des actions marketing",
            "Optimise la segmentation comportementale"
        ]
        
        for question in marketing_questions:
            if st.button(question, key=f"mkt_{hash(question)}", use_container_width=True):
                st.session_state.messages.append({"role": "user", "content": question})
                with st.spinner("üéØ Analyse expertise SmartProfile..."):
                    response, response_type = st.session_state.agent.main_response_handler(question)
                st.session_state.messages.append({"role": "assistant", "content": response, "type": response_type})
                st.rerun()
        
        st.write("üß† **Questions G√©n√©rales** (via ChatGPT):")
        general_questions = [
            "Explique-moi la th√©orie de la relativit√©",
            "Recette pour faire un g√¢teau au chocolat",
            "Histoire de la R√©volution fran√ßaise",
            "Comment apprendre le piano ?",
        ]
        
        for question in general_questions:
            if st.button(question, key=f"gen_{hash(question)}", use_container_width=True):
                st.session_state.messages.append({"role": "user", "content": question})
                with st.spinner("üß† Consultation ChatGPT..."):
                    response, response_type = st.session_state.agent.main_response_handler(question)
                st.session_state.messages.append({"role": "assistant", "content": response, "type": response_type})
                st.rerun()
    
    # Dashboard m√©triques principales
    st.subheader("üìä Dashboard SmartProfile Live")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_customers = len(st.session_state.agent.customers)
        st.markdown(f'<div class="metric-card"><h3>üë• Clients Actifs</h3><h2>{total_customers:,}</h2><small>+5.2% vs mois dernier</small></div>', 
                   unsafe_allow_html=True)
    
    with col2:
        active_campaigns = len(st.session_state.agent.campaigns[st.session_state.agent.campaigns['status']=='Active'])
        st.markdown(f'<div class="metric-card"><h3>üìß Campagnes Live</h3><h2>{active_campaigns}</h2><small>ROI: 127%</small></div>', 
                   unsafe_allow_html=True)
    
    with col3:
        nps = st.session_state.agent.calculate_nps()
        st.markdown(f'<div class="metric-card"><h3>üìà NPS Score</h3><h2>{nps:+.0f}</h2><small>{"Excellent" if nps > 50 else "Bon" if nps > 0 else "Critique"}</small></div>', 
                   unsafe_allow_html=True)
    
    with col4:
        total_revenue = st.session_state.agent.campaigns['revenue'].sum()
        st.markdown(f'<div class="metric-card"><h3>üí∞ Revenus</h3><h2>‚Ç¨{total_revenue/1000:.0f}K</h2><small>+12% vs objectif</small></div>', 
                   unsafe_allow_html=True)
    
    # Zone de chat
    st.subheader("üí¨ Chat avec SmartProfile AI Hybride")
    
    # Affichage des messages
    for message in st.session_state.messages:
        if message["role"] == "user":
            st.markdown(f'<div class="chat-user"><strong>üë§ Vous :</strong> {message["content"]}</div>', 
                       unsafe_allow_html=True)
        else:
            # Afficher le type de r√©ponse si disponible
            response_type = message.get("type", "")
            if response_type:
                st.markdown(f'<small style="color: #666; margin-left: 20%;">{response_type}</small>', 
                           unsafe_allow_html=True)
            
            st.markdown(f'<div class="chat-assistant"><strong>ü§ñ SmartProfile AI :</strong><br>{message["content"]}</div>', 
                       unsafe_allow_html=True)
    
    # Input utilisateur
    user_input = st.chat_input("Posez votre question (marketing ou g√©n√©rale)...")
    
    if user_input:
        # Ajouter message utilisateur
        st.session_state.messages.append({"role": "user", "content": user_input})
        
        # D√©terminer le type de question et afficher l'indicateur appropri√©
        is_marketing = st.session_state.agent.is_marketing_question(user_input)
        
        if is_marketing:
            status_text = "üéØ Analyse avec expertise SmartProfile marketing..."
        else:
            status_text = "üß† Consultation de ChatGPT pour question g√©n√©rale..."
        
        # G√©n√©rer r√©ponse avec indicateur de type
        with st.spinner(status_text):
            time.sleep(1)
            response, response_type = st.session_state.agent.main_response_handler(user_input)
        
        # Ajouter r√©ponse avec type
        st.session_state.messages.append({
            "role": "assistant", 
            "content": response, 
            "type": response_type
        })
        st.rerun()

if __name__ == "__main__":
    main()